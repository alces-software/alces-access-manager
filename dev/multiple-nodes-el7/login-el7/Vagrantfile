# -*- mode: ruby -*-
# vi: set ft=ruby :

# Note: This Vagrantfile failed to create the VM correctly when using Vagrant
# 1.6.5, however it does work with version 1.8.1 - make sure you're using a
# recent version of Vagrant (see also:
# https://alces.slack.com/archives/dev/p1458844175000230 and
# https://github.com/mitchellh/vagrant/issues/4465).

# Note: Need to run `sudo systemctl start clusterware-configurator` after the
# VM is created to configure.

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "hfm4/centos7"
  config.vm.box_check_update = false
  config.vm.hostname = "login1.cluster"

  # Update the below vars to match your configuration
  projects = "#{ENV['HOME']}/projects/alces"
  hostonly_net = "vboxnet0"
  # VBoxManage dhcpserver add --netname cluster1 --ip 192.168.25.1 --netmask 255.255.255.0 --lowerip 192.168.25.100 --upperip 192.168.25.200 --enable
  intnet_net = "cluster1"

  config.vm.provider "virtualbox" do |v|
    v.gui = true
    #v.customize ["modifyvm", :id, "--nic2", "hostonly"]
    #v.customize ["modifyvm", :id, "--hostonlyadapter2", hostonly_net]
    v.customize ["modifyvm", :id, "--nic2", "intnet"]
    v.customize ["modifyvm", :id, "--intnet2", intnet_net]
  end

  provision_script = <<-RUBY
  bash /vagrant/enable-iptables.sh
  export cw_DIST=el7
  export cw_BUILD_noninteractive=true
  export cw_BUILD_naming_auth="GNjdioBB+c6r2Dkackqt"

  build_type=dev

  if [ "$build_type" == "release" ]; then
    export cw_BUILD_source_branch=1.4.1
    curl -sL http://git.io/clusterware-installer | /bin/bash
  else
    # Vagrant dev build
    export cw_BUILD_source_branch=develop
    export cw_BUILD_tmp=tmp/login-el7
    export cw_BUILD_source_dir=/media/host/clusterware

    if [ -d /media/host/clusterware-handlers ]; then
      export cw_HANDLER_DEFAULT_REPO_URL=/media/host/clusterware-handlers
    fi
    if [ -d /media/host/clusterware-sessions ]; then
      export cw_SESSION_DEFAULT_REPO_URL=/media/host/clusterware-sessions
    fi
    if [ -d /media/host/clusterware-services ]; then
      export cw_SERVICEWARE_DEFAULT_REPO_URL=/media/host/clusterware-services
    fi
    if [ -d /media/host/clusterware-storage ]; then
      export cw_STORAGE_DEFAULT_REPO_URL=/media/host/clusterware-storage
    fi
    /media/host/clusterware/scripts/bootstrap
  fi

  cp /vagrant/config.yml /opt/clusterware/etc/config.yml
  PATH=/opt/clusterware/bin:$PATH
  alces handler enable clusterable
  alces handler enable cluster-gridware
  alces handler enable cluster-nfs
  alces handler enable cluster-sge
  alces handler enable cluster-vpn
  sed -e 's/eth0/enp0s8/g' -i /opt/clusterware/etc/cluster-vpn.rc
  alces handler enable taskable
  alces handler enable cluster-appliances
  alces handler enable session-firewall
  alces handler enable cluster-firewall
  RUBY
  config.vm.provision 'shell', inline: provision_script

  config.vm.synced_folder "#{projects}/clusterware", "/media/host/clusterware"
  #config.vm.synced_folder "#{projects}/metalware", "/media/host/metalware"
  #config.vm.synced_folder "#{projects}/clusterware-handlers", "/media/host/clusterware-handlers"
  #config.vm.synced_folder "#{projects}/clusterware-sessions", "/media/host/clusterware-sessions"
  #config.vm.synced_folder "#{projects}/clusterware-services", "/media/host/clusterware-services"
  #config.vm.synced_folder "#{projects}/clusterware-storage", "/media/host/clusterware-storage"
  #config.vm.synced_folder "#{projects}/packager-base", "/media/host/clusterware-packages"


  # AAM additions to Clusterware Vagrantfile below this point.

  # Sync in AAM daemon.
  config.vm.synced_folder "#{projects}/alces-access-manager-daemon", "/media/host/alces-access-manager-daemon"

  # TODO: various setup needed to make development AAM daemon run initially -
  # make this part of provisioning process:
  #
  # - install RVM: https://rvm.io/
  # - `rvm install ruby-2.2.1`
  # - `cd /media/host/alces-access-manager-daemon`
  # - `gem install bundler`
  # - `sudo yum install git pam-devel ruby-devel -y`
  # - `bundle install`


  # TODO: adapt this for below
  # start_daemon = <<-END
  # sudo systemctl stop clusterware-alces-access-manager-daemon.service # kill existing daemon
  # cd /media/host/alces-access-manager-daemon && rvmsudo bin/alces-access-manager-daemon # start development daemon
  # END
  # config.vm.provision 'shell', inline: start_daemon, run: 'always'

  # TODO: Make below part of provisioning process on each vagrant up.
  #
  # Note:
  # - To start development daemon:
  #     - kill existing daemon: `sudo systemctl stop clusterware-alces-access-manager-daemon.service`
  #     - start development daemon: `cd /media/host/alces-access-manager-daemon && rvmsudo bin/alces-access-manager-daemon`
  #
  # - To forward daemon port:
  # ssh -L 25269:10.0.2.15:25269 -p 2222 vagrant@localhost
end
